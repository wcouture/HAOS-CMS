@page "/workouts"
@using HAOS.Models.Training

<PageTitle>Workouts</PageTitle>

<h1>Exercises</h1>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Label</th>
                <th aria-label="Recommended Reps">Rec # of Reps</th>
                <th aria-label="Recommended Sets">Rec # of Sets</th>
                <th aria-label="Recommended Weight">Rec Weight</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exercise in workouts ?? [])
            {
                <tr>
                    <td>@exercise.Id</td>
                    <td>@exercise.Label</td>
                    <td>@exercise.RecommendedReps</td>
                    <td>@exercise.RecommendedSets</td>
                    <td>@exercise.RecommendedWeight</td>
                    
                    <td>
                        <a class="btn" href="#"><Icon Name="IconName.PencilSquare"/></a>
                        <a class="btn" href="#"><Icon Name="IconName.XCircle"/></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Workout>?  workouts {get; set;}

    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    protected override async Task OnInitializedAsync()
    {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.GetAsync("/workouts/all");
        workouts = await response.Content.ReadFromJsonAsync<List<Workout>>();
    }
}