@page "/workouts"
@using HAOS.Models.Training

<PageTitle>Exercises</PageTitle>

<h1>Exercises</h1>

<form @formname="workoutForm" @onsubmit="OnAddWorkout" method="post">
    <h6>Label</h6>
    <h6>Demo URL</h6>
    <p><input @bind-value="_newWorkout!.Name" required type="text"/></p>
    <p><input @bind-value="_newWorkout!.DemoUrl" required type="text"/></p>
    <p><button type="submit">Add Exercise</button></p>
</form>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th aria-label="Recommended Reps">Demo URL</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exercise in workouts ?? [])
            {
                <tr>
                    <td>@exercise.Id</td>
                    <td>@exercise.Name</td>
                    <td>@exercise.DemoUrl</td>
                    <td>
                        <a class="btn" href="#"><Icon Name="IconName.PencilSquare"/></a>
                        <button class="btn" @onclick="async () => await OnDeleteWorkout(exercise.Id)"><Icon Name="IconName.XCircle"/></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Exercise>?  workouts {get; set;}

    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    [SupplyParameterFromForm]
    private Exercise? _newWorkout {get; set;} = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkouts();
    }

    private async Task LoadWorkouts() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.GetAsync("/exercises/all");
        workouts = await response.Content.ReadFromJsonAsync<List<Exercise>>();
    }

    private async Task OnAddWorkout() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PostAsJsonAsync("/exercises/add", _newWorkout);

        if (response.IsSuccessStatusCode) {
            await LoadWorkouts();
        }
    }

    private async Task OnDeleteWorkout(int id) {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.DeleteAsync($"/exercises/delete/{id}");
        if (response.IsSuccessStatusCode)
            await LoadWorkouts();
    }
}