@page "/workouts"
@using HAOS.Models.Training

<PageTitle>Exercises</PageTitle>

<h1>Exercises</h1>

<Button @onclick="OnAddWorkout" Color="ButtonColor.Secondary" Size="ButtonSize.Small"> Add Exercise </Button>

<Modal @ref="workoutModal" Title="Create a Exercise">
    <BodyTemplate>
        <form @formname="workoutForm" @onsubmit="OnSubmitWorkout">
            <TextInput @bind-value="_newWorkout!.Name" placeholder="Exercise Name" required type="text"/>
            <TextInput @bind-value="_newWorkout!.DemoUrl" placeholder="Demo URL" required type="text"/>
            <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Add Exercise</Button>
        </form>
    </BodyTemplate>
</Modal>

<Modal @ref="editWorkoutModal" Title="Edit Exercise">
    <BodyTemplate>
        <form @formname="editWorkoutForm" @onsubmit="OnUpdateWorkout(_editWorkout!.Id)">
            <TextInput @bind-value="_editWorkout!.Name" placeholder="Exercise Name" required type="text"/>
            <TextInput @bind-value="_editWorkout!.DemoUrl" placeholder="Demo URL" required type="text"/>
            <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Save Changes</Button>
        </form>
    </BodyTemplate>
</Modal>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th aria-label="Demo Video URL">Demo URL</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var exercise in workouts ?? [])
            {
                <tr>
                    <td>@exercise.Id</td>
                    <td>@exercise.Name</td>
                    <td>@exercise.DemoUrl</td>
                    <td>
                        <button class="btn" @onclick="async () => await OnEditWorkout(exercise.Id)"><Icon Name="IconName.PencilSquare"/></button>
                        <button class="btn" @onclick="async () => await OnDeleteWorkout(exercise.Id)"><Icon Name="IconName.XCircle"/></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Modal workoutModal {get; set;} = default!;
    private Modal editWorkoutModal {get; set;} = default!;
    private List<Exercise>?  workouts {get; set;}

    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    [SupplyParameterFromForm]
    private Exercise? _newWorkout {get; set;} = new();

    [SupplyParameterFromForm]
    private Exercise? _editWorkout {get; set;} = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkouts();
    }

    private async Task LoadWorkouts() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.GetAsync("/exercises/all");
        workouts = await response.Content.ReadFromJsonAsync<List<Exercise>>();
    }

    private async Task OnSubmitWorkout() {

        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PostAsJsonAsync("/exercises/add", _newWorkout);

        if (response.IsSuccessStatusCode) {
            await workoutModal.HideAsync();
            await LoadWorkouts();
        }
    }

    private async Task OnDeleteWorkout(int id) {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.DeleteAsync($"/exercises/delete/{id}");
        if (response.IsSuccessStatusCode)
            await LoadWorkouts();
    }

    private async Task OnEditWorkout(int id) {
        _editWorkout = workouts?.FirstOrDefault(w => w.Id == id);
        await editWorkoutModal.ShowAsync();
    }

    private async Task OnUpdateWorkout(int id) {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PutAsJsonAsync($"/exercises/update/{id}", _editWorkout);

        if (response.IsSuccessStatusCode) {
            await editWorkoutModal.HideAsync();
            await LoadWorkouts();
        }
    }

    private async Task OnAddWorkout() {
        await workoutModal.ShowAsync();
    }
}