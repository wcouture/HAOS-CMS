@page "/"
@page "/programs"

@using HAOS.Models.Training

<PageTitle>Programs</PageTitle>

<h1>Training Programs</h1>

<Button @onclick="OnCreateProgram" Color="ButtonColor.Secondary" Size="ButtonSize.Small"> Add Program </Button>


@if (trainingPrograms == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Subtitle</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var program in trainingPrograms ?? [])
            {
                <tr>
                    <td class="program-selection" @onclick="async () => OnSelectProgram(program.Id)">
                        <p>@program.Id</p>
                    </td>
                    <td class="program-selection" @onclick="async () => OnSelectProgram(program.Id)">
                        <p>@program.Title</p>
                    </td>
                    <td class="program-selection" @onclick="async () => OnSelectProgram(program.Id)">
                        <p>@program.Subtitle</p>
                    </td>
                    <td>
                        <button @onclick="async () => await OnEditProgram(program)" class="btn"><Icon Name="IconName.PencilSquare"/> Edit</button>
                        <button @onclick="async () => await ConfirmDeleteProgram(program.Id)" class="btn"><Icon Name="IconName.XSquare"/> Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Modal @ref="programModal" Title="Create a Training Program" >
        <BodyTemplate>
            <form @formname="programForm" @onsubmit="OnAddProgram" method="post">
                <TextInput @bind-value="_newProgram!.Title" placeholder="Program Title" required type="text"/>
                <TextInput @bind-value="_newProgram!.Subtitle" placeholder="Program Subtitle" required type="text"/>
                <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Add Program</Button>
            </form>
        </BodyTemplate>
    </Modal>

    <Modal @ref="confirmDeleteModal" Title="Delete Program" >
        <BodyTemplate>
            <h6>Are you sure you want to delete this program?</h6>
            <Button @onclick="async () => await OnDeleteProgram(_selectedProgramId)" Color="ButtonColor.Danger"> Confirm Delete </Button>
        </BodyTemplate>
    </Modal>

    <Modal @ref="editModal" Title="Edit Program">
        <BodyTemplate>
            <form @formname="programEditForm" @onsubmit="OnUpdateProgram" method="post">
                <TextInput @bind-value="_selectedProgram.Title" placeholder="Program Title" required type="text"/>
                <TextInput @bind-value="_selectedProgram.Subtitle" placeholder="Program Subtitle" required type="text"/>
                <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Update Program</Button>
            </form>
        </BodyTemplate>
         
    </Modal>
}

@code {
    private Modal programModal {get; set;} = default!;
    private Modal confirmDeleteModal {get; set;} = default!;
    private Modal editModal {get; set;} = default!;

    private List<TrainingProgram>?  trainingPrograms {get; set;}

    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    [Inject]
    public required NavigationManager Navigation {get; set;}

    [SupplyParameterFromForm]
    private TrainingProgram? _newProgram {get; set;} = new();

    private int _selectedProgramId = 0;
    private TrainingProgram _selectedProgram {get; set;} = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadPrograms();
    }

    private async Task OnCreateProgram() {
        await programModal.ShowAsync();
    }

    private async Task LoadPrograms() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.GetAsync("/programs/all");
        trainingPrograms = await response.Content.ReadFromJsonAsync<List<TrainingProgram>>();
        
        foreach (var program in trainingPrograms ?? []) {
            response = await httpClient.GetAsync($"/segments/all/{program.Id}");
            program.Segments = await response.Content.ReadFromJsonAsync<List<ProgramSegment>>() ?? [];
        }
    }

    private void OnSelectProgram(int programId) {
        Navigation.NavigateTo($"/programs/{programId}");
    }
    
    private async Task OnAddProgram() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PostAsJsonAsync("/programs/add", _newProgram);

        if (response.IsSuccessStatusCode) {
            await programModal.HideAsync();
            await LoadPrograms();
            _newProgram = new();
        }
    }

    private async Task OnDeleteProgram(int programId) {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.DeleteAsync($"/programs/delete/{programId}");
        if (response.IsSuccessStatusCode) {
            await confirmDeleteModal.HideAsync();
            await LoadPrograms();
        }
    }

    private async Task ConfirmDeleteProgram(int programId) {
        _selectedProgramId = programId;
        await confirmDeleteModal.ShowAsync();
    }

    private async Task OnEditProgram(TrainingProgram program) {
        _selectedProgram = program;
        await editModal.ShowAsync();
    }

    private async Task OnUpdateProgram() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PutAsJsonAsync($"/programs/update/{_selectedProgram.Id}", _selectedProgram);
        if (response.IsSuccessStatusCode) {
            await editModal.HideAsync();
            await LoadPrograms();
        }   
    }
}