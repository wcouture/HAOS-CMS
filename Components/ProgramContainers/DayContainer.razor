@using HAOS.Models.Training

@code {
    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    [Parameter]
    public RenderFragment? ChildContent {get; set;}

    [Parameter]
    public required ProgramDay Day {get; set;}
    private ProgramDay _editDay {get; set;} = new();

    [SupplyParameterFromForm]
    private Session? _newSession {get; set;} = new();
    private Session? _selectedSession {get; set;} = null;

    private int SessionCount {get; set;} = 0;

    private Modal SessionModal {get; set;} = default!;
    private Modal deleteModal {get; set;} = default!;
    private Modal editDayModal {get; set;} = default!;

    private async Task OnAddSession() {
        await SessionModal.ShowAsync();
    }

    private async Task OnCreateSession() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PostAsJsonAsync($"/sessions/add/{Day.Id}", _newSession);
        if (response.IsSuccessStatusCode) {
            await SessionModal.HideAsync();
            var newSession = await response.Content.ReadFromJsonAsync<Session>();
            Day.Sessions.Add(newSession ?? _newSession!);
            _newSession = new();
        }
    }

    private async Task ConfirmDeleteSession(Session Session) {
        _selectedSession = Session;
        await deleteModal.ShowAsync();
    }

    private async Task OnDeleteSession() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.DeleteAsync($"/sessions/delete/{Day.Id}/{_selectedSession!.Id}");
        if (response.IsSuccessStatusCode) {
            await deleteModal.HideAsync();
            Day.Sessions.Remove(_selectedSession);
            _selectedSession = null;
        }
    }

    private async Task OnEditDay() {
        _editDay.Title = Day.Title;
        _editDay.WeekNum = Day.WeekNum;
        await editDayModal.ShowAsync();
    }

    private async Task OnUpdateDay() {
        _editDay.Id = Day.Id;
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PutAsJsonAsync($"/days/update/{Day.Id}", _editDay);
        if (response.IsSuccessStatusCode) {
            Day.Title = _editDay.Title;
            Day.WeekNum = _editDay.WeekNum;
            await editDayModal.HideAsync();
        }
    }
}

<Modal @ref="SessionModal" Title="Add Session">
    <BodyTemplate>
        <form @formname="SessionForm" @onsubmit="OnCreateSession" method="post">
            <div class="form-inputs">
                <label for="Session-description">Title</label>
                <TextAreaInput class="input-item" name="Session-description" @bind-value="_newSession!.Title" placeholder="Session Description" required/>
            </div>
            <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Add Session</Button>
        </form>
    </BodyTemplate>
</Modal>

<Modal @ref="deleteModal" Title="Delete Session">
    <BodyTemplate>
        <h5>Are you sure you want to delete this Session?</h5>
        <Button @onclick="OnDeleteSession" Color="ButtonColor.Danger"> Confirm Delete </Button>
    </BodyTemplate>
</Modal>

<Modal @ref="editDayModal" Title="Edit Day">
    <BodyTemplate>
        <form @formname="DayEditForm" @onsubmit="OnUpdateDay" method="post">
            <TextInput @bind-value="_editDay.Title" placeholder="Day Title" required type="text"/>
            <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Update Day</Button>
        </form>
        
    </BodyTemplate>
</Modal>

<div class="day-card">
    <div class="day-head-container">
        @ChildContent 
        <p class="day-header">@Day.Title</p>
        <div><Button @onclick="OnEditDay" Size="ButtonSize.ExtraSmall"> <Icon Name="IconName.PencilSquare"/> </Button></div>
    </div>
    
    @* Resets Session count every render *@
    @if (SessionCount > 0) {
        SessionCount = 0;
    }
    @foreach (var Session in Day.Sessions ?? []) {
        SessionCount += 1;

        <SessionContainer Session="@Session" SessionIndex="@SessionCount">
            <Button @onclick="async () => await ConfirmDeleteSession(Session)" Size="ButtonSize.ExtraSmall">
                <Icon Name="IconName.XSquare"/>
            </Button>
        </SessionContainer>
    }
    <Button @onclick="OnAddSession" Color="ButtonColor.Secondary" Size="ButtonSize.ExtraSmall" Outline="true"> Add Session </Button>
</div>