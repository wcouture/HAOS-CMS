@using HAOS.Models.Training

@code {
    [Parameter]
    public required ProgramSegment segment {get; set;}
    private ProgramSegment _editSegment {get; set;} = new();

    [Parameter]
    public RenderFragment? ChildContent {get; set;}

    [SupplyParameterFromForm]
    private ProgramDay? _newDay {get; set;} = new();

    [Inject]
    public required IHttpClientFactory httpClientFactory {get; set;}

    private Modal dayModal {get; set;} = default!;
    private Modal deleteModal {get; set;} = default!;
    private Modal editSegmentModal {get; set;} = default!;

    private ProgramDay? _selectedDay {get; set;} = null!;

    private async Task OnAddDay() {
        await dayModal.ShowAsync();
    }

    private async Task OnCreateDay() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PostAsJsonAsync($"/days/add/{segment.Id}", _newDay);
        if (response.IsSuccessStatusCode) {
            await dayModal.HideAsync();
            var dayCopy = await response.Content.ReadFromJsonAsync<ProgramDay>();
            segment.Days!.Add(dayCopy!);
            _newDay = new();
        }
    }

    private async Task ConfirmDeleteDay(ProgramDay day) {
        _selectedDay = day;
        await deleteModal.ShowAsync();
    }
    private async Task OnDeleteDay() {
        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.DeleteAsync($"/days/delete/{segment.Id}/{_selectedDay!.Id}");
        if (response.IsSuccessStatusCode) {
            await deleteModal.HideAsync();
            segment.Days!.Remove(_selectedDay);
            _selectedDay = null;
        }
    }

    private async Task OnEditSegment() {
        _editSegment.Subtitle = segment.Subtitle;
        _editSegment.Title = segment.Title;
        await editSegmentModal.ShowAsync();
    }

    private async Task OnUpdateSegment() {
        _editSegment.Id = segment.Id;
        _editSegment.ProgramId = segment.ProgramId;

        var httpClient = httpClientFactory.CreateClient("api");
        var response = await httpClient.PutAsJsonAsync($"/segments/update/{segment.Id}", _editSegment);
        if (response.IsSuccessStatusCode) {
            segment.Subtitle = _editSegment.Subtitle;
            segment.Title = _editSegment.Title;
            await editSegmentModal.HideAsync();
        }
    }
}

<Modal @ref="editSegmentModal" Title="Edit Segment">
    <BodyTemplate>
        <form @formname="segmentEditForm" @onsubmit="OnUpdateSegment" method="post">
            <div style="display: grid; grid-template-columns: 1fr; row-gap: 10px">
                <TextInput @bind-value="_editSegment.Title" placeholder="Segment Title" required type="text"/>
                <TextInput @bind-value="_editSegment.Subtitle" placeholder="Segment Description" required type="text"/>
                <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Update Segment</Button>
            </div>
        </form>
    </BodyTemplate>
</Modal>

<Modal @ref="dayModal" Title="Add Day" >
    <BodyTemplate>
        <form @formname="dayForm" @onsubmit="OnCreateDay" method="post">
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; column-gap: 10px; row-gap: 5px; padding-bottom: 10px">
                <label for="day-title">Title</label>
                <label for="day-week">Week #</label>
                <TextInput name="day-title" @bind-value="_newDay!.Title" placeholder="Day Title" required/>
                <NumberInput name="day-week" @bind-value="_newDay!.WeekNum" placeholder="Week #" required/>
            </div>
            
            <Button type="ButtonType.Submit" Color="ButtonColor.Danger">Add Day</Button>
        </form>
    </BodyTemplate>
</Modal>

<Modal @ref="deleteModal" Title="Delete Day" >
    <BodyTemplate>
        <h6>Are you sure you want to delete this day?</h6>
        <Button @onclick="OnDeleteDay" Color="ButtonColor.Danger"> Confirm Delete </Button>
    </BodyTemplate>
</Modal>

<div class="segment">
    <div class="segment-header">
        <div class="segment-title">
            <h3>@segment.Title</h3>
            <p><i>@segment.Subtitle</i></p>
        </div>
        <div class="segment-actions">
            <div><Button @onclick="OnEditSegment" Size="ButtonSize.ExtraSmall"> <Icon Name="IconName.PencilSquare"/> </Button></div>
            <div><Button @onclick="OnAddDay" Color="ButtonColor.Secondary" Size="ButtonSize.ExtraSmall" Outline="true"> Add Day </Button></div>
            @ChildContent
        </div>
    </div>
    
    
    
    <div class="days-container">
        @foreach (var day in segment.Days ?? []) {
            <DayContainer day="day">
                <div class="delete-icon">
                    <Button @onclick="async () => await ConfirmDeleteDay(day)" Size="ButtonSize.ExtraSmall">
                        <Icon Name="IconName.XSquare"/>
                    </Button>
                </div>
            </DayContainer>
        }
    </div>
    
</div>